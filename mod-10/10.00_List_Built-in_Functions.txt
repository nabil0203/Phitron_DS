https://docs.google.com/document/d/1IbS-qmFx6oRO-GyIG55yavdDUHpfHTNM/edit


ist Built-in Functions: 

1. Constructor:
╔══════════════════════════════════════╦═════════════════════════════════════════════════════════════════════╦═════════════════╗
║                 Name                 ║                               Details                               ║ Time Complexity ║
╠══════════════════════════════════════╬═════════════════════════════════════════════════════════════════════╬═════════════════╣
║ list<type>l;                         ║ Construct a list with 0 elements.                                   ║ O(1)            ║
╠══════════════════════════════════════╬═════════════════════════════════════════════════════════════════════╬═════════════════╣
║ list<type>l(N);                      ║ Construct a list with N elements and the value will be garbage.     ║ O(N)            ║
╠══════════════════════════════════════╬═════════════════════════════════════════════════════════════════════╬═════════════════╣
║ list<type>l(N,V);                    ║ Construct a list with N elements and the value will be V.           ║ O(N)            ║
╠══════════════════════════════════════╬═════════════════════════════════════════════════════════════════════╬═════════════════╣
║ list<type>l(list2);                  ║ Construct a list by copying another list list2.                     ║ O(N)            ║
╠══════════════════════════════════════╬═════════════════════════════════════════════════════════════════════╬═════════════════╣
║ list<type>l(A,A+N);                  ║ Construct a list by copying all elements from an array A of size N. ║ O(N)            ║
╠══════════════════════════════════════╬═════════════════════════════════════════════════════════════════════╬═════════════════╣
║ list<type>l(v.begin(),v.end());      ║ Construct a list by copying all elements from a vector v.           ║ O(N)            ║
╚══════════════════════════════════════╩═════════════════════════════════════════════════════════════════════╩═════════════════╝


2. Iterators
╔════════════════╦═══════════════════════════════╦═════════════════╗
║      Name      ║            Details            ║ Time Complexity ║
╠════════════════╬═══════════════════════════════╬═════════════════╣
║ l.begin()      ║ Pointer to the first element. ║ O(1)            ║
╠════════════════╬═══════════════════════════════╬═════════════════╣
║ l.end()        ║ Pointer to the last element.  ║ O(1)            ║
╚════════════════╩═══════════════════════════════╩═════════════════╝


3. Modifiers
╔═════════════════════════════════════════════════╦═════════════════════════════════════════════════════════════════╦═══════════════════════════════════════════════════════════╗
║                           Name                  ║                             Details                             ║                      Time Complexity                      ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ l= l2                                           ║ Assign another list.                                            ║ O(N)                                                      ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ l.push_back()                                   ║ Add an element to the tail.                                     ║ O(1)                                                      ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ l.push_front()                                  ║ Add an element to the head.                                     ║ O(1)                                                      ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ l.pop_back()                                    ║ Delete the tail.                                                ║ O(1)                                                      ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ l.pop_front()                                   ║ Delete the head.                                                ║ O(1)                                                      ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ l.insert()                                      ║ Insert elements at a specific position.                         ║ O(N+K); where K is the number of elements to be inserted. ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ l.erase()                                       ║ Delete elements from a specific position.                       ║ O(N+K); where K is the number of elements to be deleted.  ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ replace(l.begin(),l.end(),value,replace_value)  ║ Replace all the value with replace_value. Not under a list STL. ║ O(N)                                                      ║
╠═════════════════════════════════════════════════╬═════════════════════════════════════════════════════════════════╬═══════════════════════════════════════════════════════════╣
║ find(l.begin(),l.end(),V)                       ║ Find the value V. Not under a list STL.                         ║ O(N)                                                      ║
╚═════════════════════════════════════════════════╩═════════════════════════════════════════════════════════════════╩═══════════════════════════════════════════════════════════╝



4. Capacity
╔═══════════════════╦══════════════════════════════════════════════════╦════════════════════════════════════════════════════════════════════╗
║        Name       ║                      Details                     ║                           Time Complexity                          ║
╠═══════════════════╬══════════════════════════════════════════════════╬════════════════════════════════════════════════════════════════════╣
║ myList.size()     ║ Returns the size of the list.                    ║ O(1)                                                               ║
╠═══════════════════╬══════════════════════════════════════════════════╬════════════════════════════════════════════════════════════════════╣
║ myList.max_size() ║ Returns the maximum size that the list can hold. ║ O(1)                                                               ║
╠═══════════════════╬══════════════════════════════════════════════════╬════════════════════════════════════════════════════════════════════╣
║ myList.clear()    ║ Clears the list elements.                        ║ O(N)                                                               ║
╠═══════════════════╬══════════════════════════════════════════════════╬════════════════════════════════════════════════════════════════════╣
║ myList.empty()    ║ Return true/false if the list is empty or not.   ║ O(1)                                                               ║
╠═══════════════════╬══════════════════════════════════════════════════╬════════════════════════════════════════════════════════════════════╣
║ myList.resize()   ║ Change the size of the list.                     ║ O(K); where K is the difference between new size and current size. ║
╚═══════════════════╩══════════════════════════════════════════════════╩════════════════════════════════════════════════════════════════════╝



5. Operations
╔══════════════════════════════╦═══════════════════════════════════════════════════════════════════════════╦══════════════════════════╗
║             Name             ║                                  Details                                  ║      Time Complexity     ║
╠══════════════════════════════╬═══════════════════════════════════════════════════════════════════════════╬══════════════════════════╣
║ myList.remove(V)             ║ Remove the value V from the list.                                         ║ O(N)                     ║
╠══════════════════════════════╬═══════════════════════════════════════════════════════════════════════════╬══════════════════════════╣
║ myList.sort()                ║ Sort the list in ascending order.                                         ║ O(NlogN)                 ║
╠══════════════════════════════╬═══════════════════════════════════════════════════════════════════════════╬══════════════════════════╣
║ myList.sort(greater<type>()) ║ Sort the list in descending order                                         ║ O(NlogN)                 ║
╠══════════════════════════════╬═══════════════════════════════════════════════════════════════════════════╬══════════════════════════╣
║ myList.unique()              ║ Deletes the duplicate values from the list. You must sort the list first. ║ O(N), with sort O(NlogN) ║
╠══════════════════════════════╬═══════════════════════════════════════════════════════════════════════════╬══════════════════════════╣
║ myList.reverse()             ║ Reverse the list.                                                         ║ O(N)                     ║
╚══════════════════════════════╩═══════════════════════════════════════════════════════════════════════════╩══════════════════════════╝



6. Element access
╔════════════════════════╦══════════════════════════╦═════════════════╗
║          Name          ║          Details         ║ Time Complexity ║
╠════════════════════════╬══════════════════════════╬═════════════════╣
║ myList.back()          ║ Access the tail element. ║ O(1)            ║
╠════════════════════════╬══════════════════════════╬═════════════════╣
║ myList.front()         ║ Access the head element. ║ O(1)            ║
╠════════════════════════╬══════════════════════════╬═════════════════╣
║ next(myList.begin(),i) ║ Access the ith element   ║ O(N)            ║
╚════════════════════════╩══════════════════════════╩═════════════════╝